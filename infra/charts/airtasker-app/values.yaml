# Default values for app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 2

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: tohidsmart/simple-app
  # This sets the pull policy for images.
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.0.3"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1001
  fsGroup: 2000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80
  targetPort: 3000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  tls: false
  className: "nginx"
  annotations: 
     kubernetes.io/ingress.class: nginx

  hosts:
    - host: airtasker.demo
      paths:
        - path: /
          pathType: Prefix

resources: 
  limits:
    cpu: 200m
    memory: 256Mi
  requests:
    cpu: 100m
    memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /healthcheck
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80


# ConfigMap configuration
configMap:
  enabled: true
  annotations: {}
  data:
    APP_NAME: "airtasker"


# Network Policy Configuration
networkPolicy:
  enabled: true
  
  # Ingress controller namespace (where NGINX ingress is deployed)
  ingressControllerNamespace: "ingress-nginx"
  
  # Allow traffic from same namespace (for service-to-service communication)
  allowFromSameNamespace: true


rbac:
  enabled: true
  role:
    rules:
      # Example: If  app needs to read ConfigMaps
      - apiGroups: [""]
        resources: ["configmaps"]
        verbs: ["get", "list"]
      
      # Example: If app needs to read Secrets
      - apiGroups: [""]
        resources: ["secrets"]
        verbs: ["get"]
        
      
      - apiGroups: [""]
        resources: ["pods"]
        verbs: ["get", "list"]
        
      - apiGroups: [""]
        resources: ["endpoints", "services"]
        verbs: ["get", "list"]


# Additional volumes on the output Deployment definition.
volumes: []


# Additional volumeMounts on the output Deployment definition.
volumeMounts: []


nodeSelector: {}

tolerations: []

affinity: {}
